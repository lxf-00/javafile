package inheritance;

public class Inheritance {
    // 类的特征2： 继承（inheritance)
    // 子类继承父类的属性和行为，使得子类对象具有父类相同的属性，相同的行为。子类可以直接访问父类中非私有的属性和行为
    // 好处： 提高代码的复用性；类与类之间产生关系，是多态的前提
    // 格式： 通过extends关键字，可以声明一个子类继承另外一个父类；
    /*
    class 父类{}
    class 子类 extends 父类{}
     */
    // 示例： 父类Inheritance, 子列Inheritance1
    // 定义成员变量：姓名
    String name;
    int age1 = 5;
    // 定义成员方法：work
    public void work(){
        System.out.println("尽心尽力工作！");
    }

    // 继承后的特点--- 成员变量
    // 成员变量不重名：子类父类中出现不重名的成员变量，访问没有影响
    // 成员变量重名：子类父类中出现重名的成员变量，访问有影响（子类会覆盖父类的变量）
    // 在子类中需要访问父类中非私有成员变量时，需要使用 super 关键字，修饰父类成员变量，类似于之前学过的 this：super.父类成员变量;

    // 继承后的特点--- 成员方法
    // 成员方法不重名： 没有影响
    // 成员方法重名： 重写（override), 子类中出现跟父类相同的成员方法（返回值类型，方法名，参数都相同）会出现覆盖效果，声明不变，重新实现
    // 重写的应用： 子类可以根据需要定义自己特有的行为（扩展），super.父类方法名; 调用父类的成员方法（重名情况下，仍需要使用父类方法）

    // 继承后的特点 --- 构造方法
    // 子类无法继承父类的构造方法； 构造方法的作用是初始化成员变量，所以子类在初始化时，需要先调用父类的构造方法。
    // 子类的构造方法中默认有个super(), 表示调用父类的构造方法

    // super this 关键字： 父类中间优先于子类对象产生； super 代表父类空间标识符； this 代表当前对象的引用

    // java 只支持单继承，不支持多继承，支持多层继承
}

