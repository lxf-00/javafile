package polymorphic;

public class polymorphic {
    // 面向对象的特性 -- 多态polymorphic
    // 定义： 同一行为，具有多种不同的表现形式；
    // 前提： 继承或实现（二选其一）； 方法的重写； 父类引用指向子类的对象（格式体现）
    // 体现格式：
        // 父类类型 变量名 = new 子类对象; (父类类型指的是子类对象继承的父类类型，或者实现的父接口类型）
        // 变量名.方法名();
    // 示例：
        // Fu f = new Zi();
        // f.method();
    // 使用多态调用方法时，首先检查父类是否有该方法，没有，编译报错；有，执行子类重写的方法；

    // 好处： 实际开发中，父类类型作为方法形式参数，传递子类对象给方法，进行方法调用，更能体现多态的扩展性和便利；


    // 引用类型转换：多态的的转型分为向上转型和向下转型两种
    // 向上转型： 多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的；
    // 当父类类型引用一个子类对象时，便是向上转型： 父类类型 变量名 = new 子类类型();
    // 向下转型： 父类类型向子类类型向下的转换；这个过程是强制的；
    // 一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换格式，即向下转型： 子类类型 变量名 = (子类类型）父类变量名;

    // 为什么要使用类型转换？  调用子类特有的方法（父类不拥有，子类拥有的方法）

    // ClassCastException : 类型转换异常
    //  instanceof 关键字给引用类型变量做检验
    // 格式：
    // 变量名 instanceof 数据类型 （如果变量属于该数据类型，返回true;否则返回false)


}
